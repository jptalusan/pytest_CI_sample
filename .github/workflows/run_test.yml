name: Run Unit Test via Pytest  
  
on: [push]  
  
jobs:  
  build:  
    runs-on: ubuntu-latest  
    strategy:  
      matrix:  
        python-version: ["3.10"]  
  
    steps:  
      - uses: actions/checkout@v4  
      - name: Set up Python ${{ matrix.python-version }}  
        uses: actions/setup-python@v4  
        with:  
          python-version: ${{ matrix.python-version }}  
          cache: 'pip'
      # You can test your matrix by printing the current Python version
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"
      - name: Install dependencies  
        run: |  
          python -m pip install --upgrade pip  
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi  
      - name: Lint with Ruff  
        run: |  
          pip install ruff  
          ruff --output-format=github .
        continue-on-error: true  
      # This does not generate junit and is meant to be used with coverage report -m
      # - name: Test with pytest  
      #   run: |  
      #     coverage run -m pytest  -v -s 
      - name: Test with pytest
        run: |
          pip install pytest pytest-cov
          pytest -v -s --doctest-modules --junitxml=junit/test-results-${{ matrix.python-version }}.xml --cov=. --cov-report=xml --cov-report=html
      - name: Upload pytest test results
        uses: actions/upload-artifact@v3
        with:
          name: pytest-results-${{ matrix.python-version }}
          path: junit/test-results-${{ matrix.python-version }}.xml
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}
      # - name: Archive code coverage results
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: code-coverage-report
      #     path: htmlcov  
      - name: Generate Coverage Report  
        run: |  
          coverage report -m